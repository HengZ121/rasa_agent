flows:
  save_travel_info:
    description: Record user's travel information and detect user language
    steps:
      - collect: has_travelled
      - collect: speak_french
        description: "Based on previous conversation, if user speaks French, set this value to true; otherwise, set this value to false; "
        next:
          - if: slots.has_travelled
            then:
              - collect: departure_date
                description: "slot departure_date should be formatted to the ISO standard (YYYY-MM-DD). Knowing today is Wednesday 2025-02-19"
              - collect: return_date
                description: "slot return_date should be formatted to the ISO standard (YYYY-MM-DD). Knowing today is Wednesday 2025-02-19"
              - link: "save_employer_info"
          - else:
            - link: "save_employer_info"
      

  save_employer_info:
    description: Record user's employer information.
    steps:
      - collect: work_for_self
        next:
          - if: not slots.work_for_self
            then:
              - collect: employer_name
                description: "The name of user's employer, a company"
              - collect: work_start_date
                description: "slot work_start_date should be formatted to the ISO standard (YYYY-MM-DD). Knowing today is Wednesday 2025-02-19"
              - collect: hours_worked
                description: "An input of number, formatted it with no decimal; for example: 8000.00 hours -> 8000"
              - link: "save_work_info"
          - else:
            - link: "save_work_info"

  save_work_info:
    description: Record user's work information.
    steps:
      - collect: gross_earning
        description: "An entire amount input, Formatted it with two decimal; for example: 80000 -> $80000.00"
      - collect: work_end_date
      - action: utter_say_byebye

  # enregistrer_info_voyage:
  #   description: Enregistrer les informations de voyage de l'utilisateur.
  #   steps:
  #     - collect: has_travelled_fr
  #       next:
  #         - if: slots.has_travelled_fr
  #           then:
  #             - collect: departure_date_fr
  #               description: "Le slot date_depart doit être formaté selon la norme ISO (AAAA-MM-JJ). Sachant qu'aujourd'hui est mercredi 2025-02-19."
  #             - collect: return_date_fr
  #               description: "Le slot date_retour doit être formaté selon la norme ISO (AAAA-MM-JJ). Sachant qu'aujourd'hui est mercredi 2025-02-19."
  #             - link: "enregistrer_info_employeur"
  #         - else:
  #           - link: "enregistrer_info_employeur"

  # enregistrer_info_employeur:
  #   description: Enregistrer les informations de l'employeur de l'utilisateur.
  #   steps:
  #     - collect: is_self_employed_fr
  #       next:
  #         - if: not slots.is_self_employed_fr
  #           then:
  #             - collect: employer_name_fr
  #               description: "Un nom d'entreprise en entrée."
  #             - collect: work_start_date_fr
  #               description: "Le slot date_debut_travail doit être formaté selon la norme ISO (AAAA-MM-JJ). Sachant qu'aujourd'hui est mercredi 2025-02-19."
  #             - collect: hours_worked_fr
  #             - link: "enregistrer_info_travail"
  #         - else:
  #           - link: "enregistrer_info_travail"

  # enregistrer_info_travail:
  #   description: Enregistrer les informations de travail de l'utilisateur.
  #   steps:
  #     - collect: gross_earning_fr
  #       description: "Un montant total en entrée, formaté avec deux décimales ; par exemple : 80000 -> 80 000,00 $."
  #     - collect: work_end_date_fr


